from aiogram import Bot, Dispatcher, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile

from bot.utils import authorized_only, AuthState, load_user_data, save_user_data
from config import BOT_TOKEN, SHEET_ID, SHEET_NAME, INSTRUCTION_BOT, PASSWORD_BOT
from google_api.google_sheets import append_or_update_sheet, export_google_sheet_to_csv
from my_logging_package import Logger
from parser.parser import parse_wildberries_product
from aiogram.fsm.storage.memory import MemoryStorage

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode='HTML'))

logger_error = Logger(name="logger_error", log_file='error').get_logger()

storage = MemoryStorage()  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
dp = Dispatcher(storage=storage)  # –ü–µ—Ä–µ–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ /inf
@router.message(Command(commands=["start", "inf"]))
@authorized_only()
async def get_inf(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã /start –∏ /inf."""
    await message.answer(INSTRUCTION_BOT)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
@router.message(lambda message: message.text.isdigit())
@authorized_only()
async def parse_article_handler(message: Message):
    """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ Google Sheets."""
    article = message.text
    await message.answer(f'–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—Ä—Ç–∏–∫—É–ª {article}')
    try:
        data = await parse_wildberries_product(article)
        if data is None:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å.")
        sheet_data = [
            [
                article,
                data["name"],
                data["category"],
                data["price"],
                data["rating"],
                data["reviews"],
                data["description"],
                ", ".join(data["images"]),
                str(data["attributes"]),
            ]
        ]
        response = (
            f"üì¶ <b>–¢–æ–≤–∞—Ä:</b> {data['name']}\n"
            f"üõí <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b>  {data['category']}\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b>  {data['price']} ‚ÇΩ\n"
            f"‚≠êÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥:</b>  {data['rating']} ({data['reviews']} –æ—Ç–∑—ã–≤–æ–≤)\n"
            f"üìú <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> \n {data['description']}\n\n"
            f"üîç <b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b> \n {data['attributes']}\n\n"
            f"üñº <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b>  {', '.join(data['images'])}"
        )
        await message.answer(response)

        google_sheet_status = await append_or_update_sheet(SHEET_ID, SHEET_NAME, sheet_data)

        if google_sheet_status:
            await message.answer("–î–∞–Ω–Ω—ã–µ –≤ google-—Ç–∞–±–ª–∏—Ü–µ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ google-—Ç–∞–±–ª–∏—Ü—ã")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å.")
        print(e)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ Google Sheets –≤ CSV
@router.message(Command(commands=["exp"]))
@authorized_only()
async def export_handler(event: Message):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ Google Sheets –≤ CSV –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª."""
    try:
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ Google Sheets –≤ CSV
        file_path = await export_google_sheet_to_csv(SHEET_ID, SHEET_NAME)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º CSV —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        file = FSInputFile(file_path)
        await event.answer_document(file)
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        await event.answer("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.")
        print(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")

@router.message(AuthState.waiting_for_password)
async def process_password(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–¥–æ–≤–æ–π —Ñ—Ä–∞–∑—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
    """
    chat_id = message.chat.id

    if message.text == PASSWORD_BOT:
        # –ï—Å–ª–∏ –∫–æ–¥–æ–≤–∞—è —Ñ—Ä–∞–∑–∞ –≤–µ—Ä–Ω–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data = load_user_data()
        data['login'].append(chat_id)
        save_user_data(data)
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å.")
        await message.answer(INSTRUCTION_BOT)
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    else:
        # –ï—Å–ª–∏ –∫–æ–¥–æ–≤–∞—è —Ñ—Ä–∞–∑–∞ –Ω–µ–≤–µ—Ä–Ω–∞, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–¥–æ–≤–∞—è —Ñ—Ä–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –≠—Ö–æ-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@router.message()
@authorized_only()
async def fallback_handler(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
dp.include_router(router)
